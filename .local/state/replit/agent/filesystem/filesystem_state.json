{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from '@shared/schema';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error('DATABASE_URL environment variable is required');\n}\n\n// Create the postgres client with SSL configuration\nexport const sql = postgres(process.env.DATABASE_URL, { ssl: 'require' });\n\n// Create the drizzle instance\nexport const db = drizzle(sql, { schema });","size_bytes":434},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { loginSchema, insertClientSchema, insertApprovalSchema, insertTaskSchema, insertInventorySchema, insertStockRequestSchema, insertInvoiceSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // In a real app, you'd use proper session management\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const userId = req.headers['user-id'] as string;\n      const userRole = req.headers['user-role'] as string;\n      \n      if (!userId || !userRole) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      const metrics = await storage.getDashboardMetrics(userId, userRole);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const userRole = req.headers['user-role'] as string;\n      const userId = req.headers['user-id'] as string;\n      \n      const agentId = userRole === 'agent' ? userId : undefined;\n      const clients = await storage.getClients(agentId);\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const clientData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(clientData);\n      res.status(201).json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const updates = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, updates);\n      \n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      \n      res.json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  // Approval routes\n  app.get(\"/api/approvals\", async (req, res) => {\n    try {\n      const clientId = req.query.clientId as string;\n      const approvals = await storage.getApprovals(clientId);\n      res.json(approvals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch approvals\" });\n    }\n  });\n\n  app.post(\"/api/approvals\", async (req, res) => {\n    try {\n      const approvalData = insertApprovalSchema.parse(req.body);\n      const approval = await storage.createApproval(approvalData);\n      res.status(201).json(approval);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid approval data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create approval\" });\n    }\n  });\n\n  app.put(\"/api/approvals/:id\", async (req, res) => {\n    try {\n      const updates = insertApprovalSchema.partial().parse(req.body);\n      const approval = await storage.updateApproval(req.params.id, updates);\n      \n      if (!approval) {\n        return res.status(404).json({ message: \"Approval not found\" });\n      }\n      \n      res.json(approval);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid approval data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update approval\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const userRole = req.headers['user-role'] as string;\n      const userId = req.headers['user-id'] as string;\n      const clientId = req.query.clientId as string;\n      \n      const agentId = userRole === 'agent' ? userId : undefined;\n      const tasks = await storage.getTasks(agentId, clientId);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const updates = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(req.params.id, updates);\n      \n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/inventory\", async (req, res) => {\n    try {\n      const inventory = await storage.getInventory();\n      res.json(inventory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.post(\"/api/inventory\", async (req, res) => {\n    try {\n      const itemData = insertInventorySchema.parse(req.body);\n      const item = await storage.createInventoryItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inventory data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", async (req, res) => {\n    try {\n      const updates = insertInventorySchema.partial().parse(req.body);\n      const item = await storage.updateInventoryItem(req.params.id, updates);\n      \n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      \n      res.json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inventory data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  // Stock request routes\n  app.get(\"/api/stock-requests\", async (req, res) => {\n    try {\n      const userRole = req.headers['user-role'] as string;\n      const userId = req.headers['user-id'] as string;\n      \n      const agentId = userRole === 'agent' ? userId : undefined;\n      const requests = await storage.getStockRequests(agentId);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stock requests\" });\n    }\n  });\n\n  app.post(\"/api/stock-requests\", async (req, res) => {\n    try {\n      const requestData = insertStockRequestSchema.parse(req.body);\n      const request = await storage.createStockRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid stock request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create stock request\" });\n    }\n  });\n\n  app.put(\"/api/stock-requests/:id\", async (req, res) => {\n    try {\n      const updates = insertStockRequestSchema.partial().parse(req.body);\n      const request = await storage.updateStockRequest(req.params.id, updates);\n      \n      if (!request) {\n        return res.status(404).json({ message: \"Stock request not found\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid stock request data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update stock request\" });\n    }\n  });\n\n  // Invoice routes\n  app.get(\"/api/invoices\", async (req, res) => {\n    try {\n      const clientId = req.query.clientId as string;\n      const invoices = await storage.getInvoices(clientId);\n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", async (req, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", async (req, res) => {\n    try {\n      const invoiceData = insertInvoiceSchema.parse(req.body);\n      const invoice = await storage.createInvoice(invoiceData);\n      res.status(201).json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid invoice data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  // Users route (for agent selection)\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const userRole = req.headers['user-role'] as string;\n      \n      if (userRole !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      // Return all agents for admin to assign to clients\n      const users = [\n        await storage.getUserByEmail(\"priya@solarflow.com\"),\n        await storage.getUserByEmail(\"rohit@solarflow.com\"),\n      ].filter(Boolean);\n      \n      res.json(users.map(user => ({\n        id: user!.id,\n        name: user!.name,\n        email: user!.email,\n        role: user!.role,\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11274},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Client,\n  type InsertClient,\n  type ClientWithAgent,\n  type Approval,\n  type InsertApproval,\n  type Task,\n  type InsertTask,\n  type TaskWithClient,\n  type Inventory,\n  type InsertInventory,\n  type StockRequest,\n  type InsertStockRequest,\n  type StockRequestWithDetails,\n  type Invoice,\n  type InsertInvoice,\n  type InvoiceItem,\n  type InsertInvoiceItem,\n  type InvoiceWithItems,\n  type DashboardMetrics,\n  users,\n  clients,\n  approvals,\n  tasks,\n  inventory,\n  stockRequests,\n  invoices,\n  invoiceItems\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, desc } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Client management\n  getClients(agentId?: string): Promise<ClientWithAgent[]>;\n  getClient(id: string): Promise<ClientWithAgent | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: Partial<InsertClient>): Promise<Client | undefined>;\n\n  // Approvals\n  getApprovals(clientId?: string): Promise<Approval[]>;\n  getApproval(id: string): Promise<Approval | undefined>;\n  createApproval(approval: InsertApproval): Promise<Approval>;\n  updateApproval(id: string, updates: Partial<InsertApproval>): Promise<Approval | undefined>;\n\n  // Tasks\n  getTasks(agentId?: string, clientId?: string): Promise<TaskWithClient[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n\n  // Inventory\n  getInventory(): Promise<Inventory[]>;\n  getInventoryItem(id: string): Promise<Inventory | undefined>;\n  createInventoryItem(item: InsertInventory): Promise<Inventory>;\n  updateInventoryItem(id: string, updates: Partial<InsertInventory>): Promise<Inventory | undefined>;\n\n  // Stock requests\n  getStockRequests(agentId?: string): Promise<StockRequestWithDetails[]>;\n  getStockRequest(id: string): Promise<StockRequest | undefined>;\n  createStockRequest(request: InsertStockRequest): Promise<StockRequest>;\n  updateStockRequest(id: string, updates: Partial<InsertStockRequest>): Promise<StockRequest | undefined>;\n\n  // Invoices\n  getInvoices(clientId?: string): Promise<InvoiceWithItems[]>;\n  getInvoice(id: string): Promise<InvoiceWithItems | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem>;\n\n  // Dashboard\n  getDashboardMetrics(userId: string, userRole: string): Promise<DashboardMetrics>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializeData();\n  }\n\n  private async initializeData() {\n    try {\n      // Check if admin user exists\n      const existingAdmin = await db.select().from(users).where(eq(users.email, \"admin@solarflow.com\")).limit(1);\n      \n      if (existingAdmin.length === 0) {\n        // Create admin user\n        await db.insert(users).values({\n          name: \"John Smith\",\n          email: \"admin@solarflow.com\",\n          password: \"password123\",\n          role: \"admin\",\n        });\n\n        // Create sample agents\n        await db.insert(users).values([\n          {\n            name: \"Priya Singh\",\n            email: \"priya@solarflow.com\",\n            password: \"password123\",\n            role: \"agent\",\n          },\n          {\n            name: \"Rohit Sharma\",\n            email: \"rohit@solarflow.com\",\n            password: \"password123\",\n            role: \"agent\",\n          },\n        ]);\n\n        // Initialize sample inventory\n        await db.insert(inventory).values([\n          {\n            itemName: \"Solar Panel (320W)\",\n            description: \"High efficiency monocrystalline solar panel\",\n            quantity: 25,\n            threshold: 50,\n            unitPrice: \"15000.00\",\n          },\n          {\n            itemName: \"Inverter (5KW)\",\n            description: \"Grid-tie solar inverter\",\n            quantity: 8,\n            threshold: 15,\n            unitPrice: \"45000.00\",\n          },\n          {\n            itemName: \"Lithium Battery (100Ah)\",\n            description: \"Deep cycle lithium ion battery\",\n            quantity: 12,\n            threshold: 20,\n            unitPrice: \"25000.00\",\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error('Error initializing data:', error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async getClients(agentId?: string): Promise<ClientWithAgent[]> {\n    const baseClients = agentId \n      ? await db.select().from(clients).where(eq(clients.assignedAgentId, agentId))\n      : await db.select().from(clients);\n\n    const results = await Promise.all(\n      baseClients.map(async (client) => {\n        // Get assigned agent if exists\n        let assignedAgent = undefined;\n        if (client.assignedAgentId) {\n          const agentResult = await db.select().from(users).where(eq(users.id, client.assignedAgentId)).limit(1);\n          if (agentResult.length > 0) {\n            assignedAgent = agentResult[0];\n          }\n        }\n        \n        return {\n          ...client,\n          assignedAgent,\n        };\n      })\n    );\n    \n    // Get approvals and tasks for each client\n    const clientsWithDetails = await Promise.all(results.map(async (client) => {\n      const clientApprovals = await db.select().from(approvals).where(eq(approvals.clientId, client.id));\n      const clientTasks = await db.select().from(tasks).where(eq(tasks.clientId, client.id));\n      \n      return {\n        ...client,\n        approvals: clientApprovals,\n        tasks: clientTasks,\n      };\n    }));\n    \n    return clientsWithDetails;\n  }\n\n  async getClient(id: string): Promise<ClientWithAgent | undefined> {\n    const clientResult = await db.select().from(clients).where(eq(clients.id, id)).limit(1);\n    \n    if (clientResult.length === 0) return undefined;\n    \n    const client = clientResult[0];\n    \n    // Get assigned agent if exists\n    let assignedAgent = undefined;\n    if (client.assignedAgentId) {\n      const agentResult = await db.select().from(users).where(eq(users.id, client.assignedAgentId)).limit(1);\n      if (agentResult.length > 0) {\n        assignedAgent = agentResult[0];\n      }\n    }\n    \n    const clientApprovals = await db.select().from(approvals).where(eq(approvals.clientId, client.id));\n    const clientTasks = await db.select().from(tasks).where(eq(tasks.clientId, client.id));\n    \n    return {\n      ...client,\n      assignedAgent,\n      approvals: clientApprovals,\n      tasks: clientTasks,\n    };\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const result = await db.insert(clients).values(client).returning();\n    return result[0];\n  }\n\n  async updateClient(id: string, updates: Partial<InsertClient>): Promise<Client | undefined> {\n    const result = await db.update(clients).set(updates).where(eq(clients.id, id)).returning();\n    return result[0];\n  }\n\n  async getApprovals(clientId?: string): Promise<Approval[]> {\n    if (clientId) {\n      return await db.select().from(approvals).where(eq(approvals.clientId, clientId));\n    }\n    return await db.select().from(approvals);\n  }\n\n  async getApproval(id: string): Promise<Approval | undefined> {\n    const result = await db.select().from(approvals).where(eq(approvals.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createApproval(approval: InsertApproval): Promise<Approval> {\n    const result = await db.insert(approvals).values(approval).returning();\n    return result[0];\n  }\n\n  async updateApproval(id: string, updates: Partial<InsertApproval>): Promise<Approval | undefined> {\n    const result = await db.update(approvals).set({ ...updates, updatedAt: new Date() }).where(eq(approvals.id, id)).returning();\n    return result[0];\n  }\n\n  async getTasks(agentId?: string, clientId?: string): Promise<TaskWithClient[]> {\n    // Build filter conditions\n    const conditions = [];\n    if (agentId) {\n      conditions.push(eq(tasks.assignedAgentId, agentId));\n    }\n    if (clientId) {\n      conditions.push(eq(tasks.clientId, clientId));\n    }\n    \n    // Get base tasks\n    const baseTasks = conditions.length > 0\n      ? await db.select().from(tasks).where(conditions.length === 1 ? conditions[0] : and(...conditions))\n      : await db.select().from(tasks);\n    \n    // Populate related data\n    const tasksWithDetails = await Promise.all(\n      baseTasks.map(async (task) => {\n        const [clientResult, agentResult] = await Promise.all([\n          db.select().from(clients).where(eq(clients.id, task.clientId)).limit(1),\n          db.select().from(users).where(eq(users.id, task.assignedAgentId)).limit(1),\n        ]);\n        \n        if (clientResult.length === 0 || agentResult.length === 0) {\n          return null;\n        }\n        \n        return {\n          ...task,\n          client: clientResult[0],\n          assignedAgent: agentResult[0],\n        };\n      })\n    );\n    \n    return tasksWithDetails.filter(Boolean) as TaskWithClient[];\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const result = await db.select().from(tasks).where(eq(tasks.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const result = await db.insert(tasks).values(task).returning();\n    return result[0];\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const result = await db.update(tasks).set(updates).where(eq(tasks.id, id)).returning();\n    return result[0];\n  }\n\n  async getInventory(): Promise<Inventory[]> {\n    return await db.select().from(inventory);\n  }\n\n  async getInventoryItem(id: string): Promise<Inventory | undefined> {\n    const result = await db.select().from(inventory).where(eq(inventory.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createInventoryItem(item: InsertInventory): Promise<Inventory> {\n    const result = await db.insert(inventory).values(item).returning();\n    return result[0];\n  }\n\n  async updateInventoryItem(id: string, updates: Partial<InsertInventory>): Promise<Inventory | undefined> {\n    const result = await db.update(inventory).set({ ...updates, updatedAt: new Date() }).where(eq(inventory.id, id)).returning();\n    return result[0];\n  }\n\n  async getStockRequests(agentId?: string): Promise<StockRequestWithDetails[]> {\n    // Get base stock requests\n    const baseRequests = agentId \n      ? await db.select().from(stockRequests).where(eq(stockRequests.agentId, agentId))\n      : await db.select().from(stockRequests);\n    \n    // Populate related data\n    const requestsWithDetails = await Promise.all(\n      baseRequests.map(async (request) => {\n        const [agentResult, itemResult] = await Promise.all([\n          db.select().from(users).where(eq(users.id, request.agentId)).limit(1),\n          db.select().from(inventory).where(eq(inventory.id, request.itemId)).limit(1),\n        ]);\n        \n        if (agentResult.length === 0 || itemResult.length === 0) {\n          return null;\n        }\n        \n        let approvedByUser = undefined;\n        if (request.approvedBy) {\n          const approvedByResult = await db.select().from(users).where(eq(users.id, request.approvedBy)).limit(1);\n          approvedByUser = approvedByResult[0];\n        }\n        \n        return {\n          ...request,\n          agent: agentResult[0],\n          item: itemResult[0],\n          approvedByUser,\n        };\n      })\n    );\n    \n    return requestsWithDetails.filter(Boolean) as StockRequestWithDetails[];\n  }\n\n  async getStockRequest(id: string): Promise<StockRequest | undefined> {\n    const result = await db.select().from(stockRequests).where(eq(stockRequests.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createStockRequest(request: InsertStockRequest): Promise<StockRequest> {\n    const result = await db.insert(stockRequests).values(request).returning();\n    return result[0];\n  }\n\n  async updateStockRequest(id: string, updates: Partial<InsertStockRequest>): Promise<StockRequest | undefined> {\n    const result = await db.update(stockRequests).set({ ...updates, updatedAt: new Date() }).where(eq(stockRequests.id, id)).returning();\n    return result[0];\n  }\n\n  async getInvoices(clientId?: string): Promise<InvoiceWithItems[]> {\n    const invoiceResults = clientId \n      ? await db.select().from(invoices).where(eq(invoices.clientId, clientId))\n      : await db.select().from(invoices);\n    \n    return await Promise.all(invoiceResults.map(async (invoice) => {\n      const clientResult = await db.select().from(clients).where(eq(clients.id, invoice.clientId)).limit(1);\n      const itemsResults = await db\n        .select({\n          id: invoiceItems.id,\n          invoiceId: invoiceItems.invoiceId,\n          itemId: invoiceItems.itemId,\n          quantity: invoiceItems.quantity,\n          unitPrice: invoiceItems.unitPrice,\n          totalPrice: invoiceItems.totalPrice,\n          item: {\n            id: inventory.id,\n            itemName: inventory.itemName,\n            description: inventory.description,\n            quantity: inventory.quantity,\n            threshold: inventory.threshold,\n            unitPrice: inventory.unitPrice,\n            updatedAt: inventory.updatedAt,\n          },\n        })\n        .from(invoiceItems)\n        .leftJoin(inventory, eq(invoiceItems.itemId, inventory.id))\n        .where(eq(invoiceItems.invoiceId, invoice.id));\n      \n      return {\n        ...invoice,\n        client: clientResult[0],\n        items: itemsResults.map(item => ({\n          id: item.id,\n          invoiceId: item.invoiceId,\n          itemId: item.itemId,\n          quantity: item.quantity,\n          unitPrice: item.unitPrice,\n          totalPrice: item.totalPrice,\n          item: item.item && item.item.id ? {\n            id: item.item.id,\n            itemName: item.item.itemName!,\n            description: item.item.description,\n            quantity: item.item.quantity!,\n            threshold: item.item.threshold!,\n            unitPrice: item.item.unitPrice,\n            updatedAt: item.item.updatedAt!,\n          } : undefined!,\n        })),\n      };\n    }));\n  }\n\n  async getInvoice(id: string): Promise<InvoiceWithItems | undefined> {\n    const invoiceResult = await db.select().from(invoices).where(eq(invoices.id, id)).limit(1);\n    if (invoiceResult.length === 0) return undefined;\n    \n    const invoice = invoiceResult[0];\n    const clientResult = await db.select().from(clients).where(eq(clients.id, invoice.clientId)).limit(1);\n    if (clientResult.length === 0) return undefined;\n    \n    const itemsResults = await db\n      .select({\n        id: invoiceItems.id,\n        invoiceId: invoiceItems.invoiceId,\n        itemId: invoiceItems.itemId,\n        quantity: invoiceItems.quantity,\n        unitPrice: invoiceItems.unitPrice,\n        totalPrice: invoiceItems.totalPrice,\n        item: {\n          id: inventory.id,\n          itemName: inventory.itemName,\n          description: inventory.description,\n          quantity: inventory.quantity,\n          threshold: inventory.threshold,\n          unitPrice: inventory.unitPrice,\n          updatedAt: inventory.updatedAt,\n        },\n      })\n      .from(invoiceItems)\n      .leftJoin(inventory, eq(invoiceItems.itemId, inventory.id))\n      .where(eq(invoiceItems.invoiceId, invoice.id));\n\n    return {\n      ...invoice,\n      client: clientResult[0],\n      items: itemsResults.map(item => ({\n        id: item.id,\n        invoiceId: item.invoiceId,\n        itemId: item.itemId,\n        quantity: item.quantity,\n        unitPrice: item.unitPrice,\n        totalPrice: item.totalPrice,\n        item: item.item && item.item.id ? {\n          id: item.item.id,\n          itemName: item.item.itemName!,\n          description: item.item.description,\n          quantity: item.item.quantity!,\n          threshold: item.item.threshold!,\n          unitPrice: item.item.unitPrice,\n          updatedAt: item.item.updatedAt!,\n        } : undefined!,\n      })),\n    };\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const result = await db.insert(invoices).values(invoice).returning();\n    return result[0];\n  }\n\n  async createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem> {\n    const result = await db.insert(invoiceItems).values(item).returning();\n    return result[0];\n  }\n\n  async getDashboardMetrics(userId: string, userRole: string): Promise<DashboardMetrics> {\n    const clients = await this.getClients(userRole === 'agent' ? userId : undefined);\n    const tasks = await this.getTasks(userRole === 'agent' ? userId : undefined);\n    const approvals = await this.getApprovals();\n    const inventory = await this.getInventory();\n    const invoices = await this.getInvoices();\n\n    // Calculate metrics\n    const totalClients = clients.length;\n    const activeProjects = clients.filter(c => c.projectStatus === 'in-progress').length;\n    const pendingApprovals = approvals.filter(a => a.status === 'pending').length;\n    \n    const currentMonth = new Date().getMonth();\n    const monthlyRevenue = invoices\n      .filter(i => i.createdAt.getMonth() === currentMonth && i.status === 'paid')\n      .reduce((sum, i) => sum + parseFloat(i.totalAmount), 0);\n\n    // Approval pipeline stats\n    const approvalSteps = ['application', 'verification', 'inspection', 'noc', 'clearance'];\n    const approvalPipeline = approvalSteps.map(step => {\n      const count = approvals.filter(a => a.step === step).length;\n      return {\n        step,\n        count,\n        percentage: totalClients > 0 ? Math.round((count / totalClients) * 100) : 0,\n      };\n    });\n\n    // Low stock items\n    const lowStockItems = inventory\n      .filter(item => item.quantity <= item.threshold)\n      .map(item => ({ ...item, isLow: true }));\n\n    // Recent clients (last 5)\n    const recentClients = clients\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())\n      .slice(0, 5);\n\n    // Pending tasks\n    const pendingTasks = tasks\n      .filter(task => task.status === 'pending')\n      .sort((a, b) => {\n        if (!a.dueDate || !b.dueDate) return 0;\n        return a.dueDate.getTime() - b.dueDate.getTime();\n      })\n      .slice(0, 10);\n\n    return {\n      totalClients,\n      activeProjects,\n      pendingApprovals,\n      monthlyRevenue: `â‚¹${(monthlyRevenue / 100000).toFixed(1)}L`,\n      approvalPipeline,\n      lowStockItems,\n      recentClients,\n      pendingTasks,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19396},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, uuid, timestamp, integer, decimal, boolean, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'agent']);\nexport const projectStatusEnum = pgEnum('project_status', ['lead', 'in-progress', 'completed']);\nexport const approvalStatusEnum = pgEnum('approval_status', ['pending', 'approved', 'rejected']);\nexport const taskStatusEnum = pgEnum('task_status', ['pending', 'completed', 'overdue']);\nexport const stockRequestStatusEnum = pgEnum('stock_request_status', ['pending', 'approved', 'denied']);\nexport const invoiceStatusEnum = pgEnum('invoice_status', ['paid', 'partial', 'pending']);\nexport const approvalStepEnum = pgEnum('approval_step', ['application', 'verification', 'inspection', 'noc', 'clearance']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default('agent'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Clients table\nexport const clients = pgTable(\"clients\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\").notNull(),\n  address: text(\"address\").notNull(),\n  assignedAgentId: uuid(\"assigned_agent_id\").references(() => users.id),\n  projectStatus: projectStatusEnum(\"project_status\").default('lead').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Approvals table\nexport const approvals = pgTable(\"approvals\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: uuid(\"client_id\").references(() => clients.id).notNull(),\n  step: approvalStepEnum(\"step\").notNull(),\n  status: approvalStatusEnum(\"status\").default('pending').notNull(),\n  remarks: text(\"remarks\"),\n  documentUrl: text(\"document_url\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: uuid(\"client_id\").references(() => clients.id).notNull(),\n  assignedAgentId: uuid(\"assigned_agent_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\"),\n  status: taskStatusEnum(\"status\").default('pending').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Inventory table\nexport const inventory = pgTable(\"inventory\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemName: text(\"item_name\").notNull(),\n  description: text(\"description\"),\n  quantity: integer(\"quantity\").notNull().default(0),\n  threshold: integer(\"threshold\").notNull().default(10),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Stock requests table\nexport const stockRequests = pgTable(\"stock_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  agentId: uuid(\"agent_id\").references(() => users.id).notNull(),\n  itemId: uuid(\"item_id\").references(() => inventory.id).notNull(),\n  quantityRequested: integer(\"quantity_requested\").notNull(),\n  status: stockRequestStatusEnum(\"status\").default('pending').notNull(),\n  reason: text(\"reason\"),\n  approvedBy: uuid(\"approved_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: uuid(\"client_id\").references(() => clients.id).notNull(),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(),\n  amountPaid: decimal(\"amount_paid\", { precision: 12, scale: 2 }).default('0').notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: invoiceStatusEnum(\"status\").default('pending').notNull(),\n  pdfUrl: text(\"pdf_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Invoice items table\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: uuid(\"invoice_id\").references(() => invoices.id).notNull(),\n  itemId: uuid(\"item_id\").references(() => inventory.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertClientSchema = createInsertSchema(clients).omit({ id: true, createdAt: true });\nexport const insertApprovalSchema = createInsertSchema(approvals).omit({ id: true, updatedAt: true });\nexport const insertTaskSchema = createInsertSchema(tasks).omit({ id: true, createdAt: true });\nexport const insertInventorySchema = createInsertSchema(inventory).omit({ id: true, updatedAt: true });\nexport const insertStockRequestSchema = createInsertSchema(stockRequests).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({ id: true, createdAt: true });\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({ id: true });\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\nexport type InsertApproval = z.infer<typeof insertApprovalSchema>;\nexport type Approval = typeof approvals.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertInventory = z.infer<typeof insertInventorySchema>;\nexport type Inventory = typeof inventory.$inferSelect;\nexport type InsertStockRequest = z.infer<typeof insertStockRequestSchema>;\nexport type StockRequest = typeof stockRequests.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\n\n// Extended types for API responses\nexport type ClientWithAgent = Client & {\n  assignedAgent?: User;\n  approvals?: Approval[];\n  tasks?: Task[];\n};\n\nexport type TaskWithClient = Task & {\n  client: Client;\n  assignedAgent: User;\n};\n\nexport type StockRequestWithDetails = StockRequest & {\n  agent: User;\n  item: Inventory;\n  approvedByUser?: User;\n};\n\nexport type InvoiceWithItems = Invoice & {\n  client: Client;\n  items: (InvoiceItem & { item: Inventory })[];\n};\n\n// Dashboard metrics type\nexport type DashboardMetrics = {\n  totalClients: number;\n  activeProjects: number;\n  pendingApprovals: number;\n  monthlyRevenue: string;\n  approvalPipeline: {\n    step: string;\n    count: number;\n    percentage: number;\n  }[];\n  lowStockItems: (Inventory & { isLow: boolean })[];\n  recentClients: ClientWithAgent[];\n  pendingTasks: TaskWithClient[];\n};\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type LoginCredentials = z.infer<typeof loginSchema>;\n\n// Schema object for drizzle\nexport const schema = {\n  users,\n  clients,\n  approvals,\n  tasks,\n  inventory,\n  stockRequests,\n  invoices,\n  invoiceItems,\n};\n","size_bytes":7977},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/auth\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Approvals from \"@/pages/approvals\";\nimport Agents from \"@/pages/agents\";\nimport Inventory from \"@/pages/inventory\";\nimport Finance from \"@/pages/finance\";\nimport Tasks from \"@/pages/tasks\";\nimport Reports from \"@/pages/reports\";\n\nfunction AuthenticatedLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar />\n      {children}\n    </div>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route component={Login} />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthenticatedLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/clients\">\n          <ProtectedRoute>\n            <Clients />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/approvals\">\n          <ProtectedRoute>\n            <Approvals />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/agents\">\n          <ProtectedRoute allowedRoles={['admin']}>\n            <Agents />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/inventory\">\n          <ProtectedRoute>\n            <Inventory />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/finance\">\n          <ProtectedRoute>\n            <Finance />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/tasks\">\n          <ProtectedRoute>\n            <Tasks />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/reports\">\n          <ProtectedRoute>\n            <Reports />\n          </ProtectedRoute>\n        </Route>\n        <Route component={NotFound} />\n      </Switch>\n    </AuthenticatedLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3054},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { AuthState, AuthUser, LoginCredentials } from '@/types';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isLoading: true,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    // Check for existing session\n    const userData = localStorage.getItem('auth-user');\n    if (userData) {\n      try {\n        const user = JSON.parse(userData);\n        setState({\n          user,\n          isLoading: false,\n          isAuthenticated: true,\n        });\n      } catch {\n        localStorage.removeItem('auth-user');\n        setState(prev => ({ ...prev, isLoading: false }));\n      }\n    } else {\n      setState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    try {\n      setState(prev => ({ ...prev, isLoading: true }));\n      \n      const response = await apiRequest('POST', '/api/auth/login', credentials);\n      const data = await response.json();\n      \n      const user: AuthUser = data.user;\n      \n      setState({\n        user,\n        isLoading: false,\n        isAuthenticated: true,\n      });\n      \n      localStorage.setItem('auth-user', JSON.stringify(user));\n    } catch (error) {\n      setState(prev => ({ ...prev, isLoading: false }));\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setState({\n      user: null,\n      isLoading: false,\n      isAuthenticated: false,\n    });\n    localStorage.removeItem('auth-user');\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        login,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Custom hook for authenticated API requests\nexport function useAuthenticatedRequest() {\n  const { user } = useAuth();\n  \n  const makeRequest = async (method: string, url: string, data?: unknown) => {\n    if (!user) {\n      throw new Error('User not authenticated');\n    }\n    \n    const response = await fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'user-id': user.id,\n        'user-role': user.role,\n      },\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`${response.status}: ${errorText}`);\n    }\n    \n    return response;\n  };\n  \n  return makeRequest;\n}\n","size_bytes":2976},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.tsx":{"content":"import { ReactNode } from 'react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Loader2 } from 'lucide-react';\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  allowedRoles?: ('admin' | 'agent')[];\n}\n\nexport function ProtectedRoute({ children, allowedRoles }: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n              <span>Loading...</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null; // Will redirect to login via App routing\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-destructive mb-2\">Access Denied</h2>\n              <p className=\"text-muted-foreground\">\n                You don't have permission to access this resource.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1620},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/agents.tsx":{"content":"import { TopBar } from '@/components/layout/topbar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { useAuth } from '@/hooks/use-auth';\nimport { ProtectedRoute } from '@/lib/auth';\n\nexport default function Agents() {\n  const { user } = useAuth();\n\n  return (\n    <ProtectedRoute allowedRoles={['admin']}>\n      <div className=\"flex-1 overflow-y-auto\">\n        <TopBar \n          title=\"Agents\" \n          subtitle=\"Manage your solar installation agents and their performance\" \n        />\n        \n        <main className=\"p-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Agent Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground mb-4\">Agent management features coming soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  This section will allow you to manage agents, track their performance, and assign clients.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </ProtectedRoute>\n  );\n}\n","size_bytes":1295},"client/src/pages/approvals.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { TopBar } from '@/components/layout/topbar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { \n  FileCheck, \n  Edit, \n  Upload, \n  CheckCircle, \n  XCircle, \n  Clock,\n  AlertTriangle\n} from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { useAuthenticatedRequest } from '@/hooks/use-auth';\nimport { queryClient } from '@/lib/queryClient';\nimport type { Approval, ClientWithAgent } from '@/types';\n\nexport default function Approvals() {\n  const [selectedClient, setSelectedClient] = useState<string>('');\n  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);\n  const [selectedApproval, setSelectedApproval] = useState<Approval | null>(null);\n  const [updateStatus, setUpdateStatus] = useState<string>('');\n  const [remarks, setRemarks] = useState('');\n  \n  const makeRequest = useAuthenticatedRequest();\n\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<ClientWithAgent[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const { data: approvals = [], isLoading: approvalsLoading } = useQuery<Approval[]>({\n    queryKey: ['/api/approvals', selectedClient],\n    queryFn: async () => {\n      const url = selectedClient ? `/api/approvals?clientId=${selectedClient}` : '/api/approvals';\n      const response = await fetch(url, {\n        headers: {\n          'user-id': localStorage.getItem('auth-user') ? JSON.parse(localStorage.getItem('auth-user')!).id : '',\n          'user-role': localStorage.getItem('auth-user') ? JSON.parse(localStorage.getItem('auth-user')!).role : '',\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch approvals');\n      return response.json();\n    },\n  });\n\n  const updateApprovalMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Approval> }) => {\n      await makeRequest('PUT', `/api/approvals/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/approvals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n      setIsUpdateModalOpen(false);\n      setSelectedApproval(null);\n      setUpdateStatus('');\n      setRemarks('');\n    },\n  });\n\n  const createApprovalMutation = useMutation({\n    mutationFn: async (data: { clientId: string; step: string; status: string; remarks?: string }) => {\n      await makeRequest('POST', '/api/approvals', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/approvals'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n    },\n  });\n\n  const approvalSteps = [\n    { key: 'application', label: 'Application Submission', color: 'bg-blue-500' },\n    { key: 'verification', label: 'Document Verification', color: 'bg-green-500' },\n    { key: 'inspection', label: 'Site Inspection', color: 'bg-yellow-500' },\n    { key: 'noc', label: 'NOC Issuance', color: 'bg-purple-500' },\n    { key: 'clearance', label: 'Final Installation Clearance', color: 'bg-red-500' },\n  ];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'default';\n      case 'rejected':\n        return 'destructive';\n      case 'pending':\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getClientApprovalProgress = (clientId: string) => {\n    const clientApprovals = approvals.filter(a => a.clientId === clientId);\n    const completedSteps = clientApprovals.filter(a => a.status === 'approved').length;\n    return Math.round((completedSteps / approvalSteps.length) * 100);\n  };\n\n  const handleUpdateApproval = (approval: Approval) => {\n    setSelectedApproval(approval);\n    setUpdateStatus(approval.status);\n    setRemarks(approval.remarks || '');\n    setIsUpdateModalOpen(true);\n  };\n\n  const handleSubmitUpdate = () => {\n    if (!selectedApproval) return;\n    \n    updateApprovalMutation.mutate({\n      id: selectedApproval.id,\n      data: {\n        status: updateStatus as 'pending' | 'approved' | 'rejected',\n        remarks,\n      },\n    });\n  };\n\n  const getClientForApproval = (clientId: string) => {\n    return clients.find(c => c.id === clientId);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Government Approvals\" \n        subtitle=\"Track and manage government approval workflows for solar installations\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Approval Pipeline</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Monitor the 5-stage government approval process\n            </p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Select value={selectedClient} onValueChange={setSelectedClient}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-client-filter\">\n                <SelectValue placeholder=\"Filter by client\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Clients</SelectItem>\n                {clients.map((client) => (\n                  <SelectItem key={client.id} value={client.id}>\n                    {client.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Pipeline Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n          {approvalSteps.map((step, index) => {\n            const stepApprovals = approvals.filter(a => a.step === step.key);\n            const pendingCount = stepApprovals.filter(a => a.status === 'pending').length;\n            const approvedCount = stepApprovals.filter(a => a.status === 'approved').length;\n            \n            return (\n              <Card key={step.key} className=\"text-center\">\n                <CardContent className=\"p-4\">\n                  <div className={`w-3 h-3 ${step.color} rounded-full mx-auto mb-2`}></div>\n                  <h3 className=\"font-semibold text-sm mb-2\">{step.label}</h3>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-lg font-bold text-green-600\">{approvedCount}</p>\n                    <p className=\"text-xs text-muted-foreground\">Approved</p>\n                    {pendingCount > 0 && (\n                      <>\n                        <p className=\"text-sm font-semibold text-yellow-600\">{pendingCount}</p>\n                        <p className=\"text-xs text-muted-foreground\">Pending</p>\n                      </>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* Client Progress Overview */}\n        {!selectedClient && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle>Client Progress Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {clientsLoading ? (\n                <div className=\"space-y-4\">\n                  {[1, 2, 3].map((i) => (\n                    <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {clients.filter(c => c.projectStatus !== 'completed').map((client) => {\n                    const progress = getClientApprovalProgress(client.id);\n                    return (\n                      <div key={client.id} className=\"flex items-center space-x-4 p-3 border rounded-lg\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback>\n                            {client.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <h4 className=\"font-medium\">{client.name}</h4>\n                            <span className=\"text-sm text-muted-foreground\">{progress}% Complete</span>\n                          </div>\n                          <Progress value={progress} className=\"h-2\" />\n                        </div>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => setSelectedClient(client.id)}\n                          data-testid={`button-view-client-approvals-${client.id}`}\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Approvals Table */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {selectedClient ? `Approvals for ${clients.find(c => c.id === selectedClient)?.name}` : 'All Approvals'}\n              </CardTitle>\n              {selectedClient && (\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setSelectedClient('')}\n                  data-testid=\"button-clear-filter\"\n                >\n                  Clear Filter\n                </Button>\n              )}\n            </div>\n          </CardHeader>\n          <CardContent>\n            {approvalsLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                ))}\n              </div>\n            ) : approvals.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <FileCheck className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">No approvals found</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Approvals will be created automatically when clients are assigned to agents.\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Approval Step</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Remarks</TableHead>\n                      <TableHead>Last Updated</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {approvals.map((approval) => {\n                      const client = getClientForApproval(approval.clientId);\n                      const step = approvalSteps.find(s => s.key === approval.step);\n                      \n                      return (\n                        <TableRow key={approval.id} data-testid={`approval-row-${approval.id}`}>\n                          <TableCell>\n                            {client && (\n                              <div className=\"flex items-center space-x-3\">\n                                <Avatar className=\"h-8 w-8\">\n                                  <AvatarFallback className=\"text-xs\">\n                                    {client.name.split(' ').map(n => n[0]).join('')}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"font-medium\">{client.name}</span>\n                              </div>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className={`w-2 h-2 ${step?.color || 'bg-gray-500'} rounded-full`}></div>\n                              <span className=\"text-sm\">{step?.label}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusIcon(approval.status)}\n                              <Badge variant={getStatusVariant(approval.status)}>\n                                {approval.status.charAt(0).toUpperCase() + approval.status.slice(1)}\n                              </Badge>\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"max-w-48 truncate\">\n                            {approval.remarks || 'No remarks'}\n                          </TableCell>\n                          <TableCell className=\"text-sm text-muted-foreground\">\n                            {formatDistanceToNow(new Date(approval.updatedAt), { addSuffix: true })}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleUpdateApproval(approval)}\n                                data-testid={`button-update-approval-${approval.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              {approval.status === 'pending' && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  data-testid={`button-upload-document-${approval.id}`}\n                                >\n                                  <Upload className=\"h-4 w-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Update Approval Modal */}\n        <Dialog open={isUpdateModalOpen} onOpenChange={setIsUpdateModalOpen}>\n          <DialogContent data-testid=\"modal-update-approval\">\n            <DialogHeader>\n              <DialogTitle>Update Approval Status</DialogTitle>\n            </DialogHeader>\n            \n            {selectedApproval && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Status</label>\n                  <Select value={updateStatus} onValueChange={setUpdateStatus}>\n                    <SelectTrigger data-testid=\"select-approval-status\">\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"approved\">Approved</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Remarks</label>\n                  <Textarea\n                    value={remarks}\n                    onChange={(e) => setRemarks(e.target.value)}\n                    placeholder=\"Add any remarks or notes...\"\n                    rows={3}\n                    data-testid=\"textarea-approval-remarks\"\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsUpdateModalOpen(false)}\n                    data-testid=\"button-cancel-approval-update\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleSubmitUpdate}\n                    disabled={updateApprovalMutation.isPending}\n                    data-testid=\"button-save-approval-update\"\n                  >\n                    {updateApprovalMutation.isPending ? 'Saving...' : 'Save Changes'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17755},"client/src/pages/clients.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { TopBar } from '@/components/layout/topbar';\nimport { ClientModal } from '@/components/modals/client-modal';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { UserPlus, Edit, Eye, Phone, Mail } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { ClientWithAgent } from '@/types';\n\nexport default function Clients() {\n  const [selectedClient, setSelectedClient] = useState<ClientWithAgent | undefined>();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const { data: clients = [], isLoading, refetch } = useQuery<ClientWithAgent[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const handleAddClient = () => {\n    setSelectedClient(undefined);\n    setIsModalOpen(true);\n  };\n\n  const handleEditClient = (client: ClientWithAgent) => {\n    setSelectedClient(client);\n    setIsModalOpen(true);\n  };\n\n  const handleModalClose = () => {\n    setIsModalOpen(false);\n    setSelectedClient(undefined);\n  };\n\n  const handleModalSave = () => {\n    refetch();\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'in-progress':\n        return 'default';\n      case 'lead':\n        return 'secondary';\n      case 'completed':\n        return 'outline';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'in-progress':\n        return 'In Progress';\n      case 'lead':\n        return 'Lead';\n      case 'completed':\n        return 'Completed';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Clients\" \n        subtitle=\"Manage your solar installation clients and projects\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">All Clients</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {clients.length} client{clients.length !== 1 ? 's' : ''} total\n            </p>\n          </div>\n          <Button onClick={handleAddClient} data-testid=\"button-add-client\">\n            <UserPlus className=\"mr-2 h-4 w-4\" />\n            Add Client\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Client List</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                ))}\n              </div>\n            ) : clients.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground mb-4\">No clients found</p>\n                <Button onClick={handleAddClient} data-testid=\"button-add-first-client\">\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  Add Your First Client\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Agent</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {clients.map((client) => (\n                      <TableRow key={client.id} data-testid={`client-row-${client.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarFallback>\n                                {client.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`text-client-name-${client.id}`}>\n                                {client.name}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground truncate max-w-48\">\n                                {client.address}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center text-sm\">\n                              <Phone className=\"h-3 w-3 mr-1\" />\n                              {client.phone}\n                            </div>\n                            {client.email && (\n                              <div className=\"flex items-center text-sm text-muted-foreground\">\n                                <Mail className=\"h-3 w-3 mr-1\" />\n                                {client.email}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-agent-${client.id}`}>\n                          {client.assignedAgent ? (\n                            <div className=\"flex items-center space-x-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarFallback className=\"text-xs\">\n                                  {client.assignedAgent.name.split(' ').map(n => n[0]).join('')}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-sm\">{client.assignedAgent.name}</span>\n                            </div>\n                          ) : (\n                            <span className=\"text-muted-foreground text-sm\">Unassigned</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusVariant(client.projectStatus)} data-testid={`badge-status-${client.id}`}>\n                            {getStatusLabel(client.projectStatus)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\" data-testid={`text-created-${client.id}`}>\n                          {formatDistanceToNow(new Date(client.createdAt), { addSuffix: true })}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditClient(client)}\n                              data-testid={`button-view-client-${client.id}`}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditClient(client)}\n                              data-testid={`button-edit-client-${client.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <ClientModal\n          open={isModalOpen}\n          onOpenChange={handleModalClose}\n          client={selectedClient}\n          onSave={handleModalSave}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":8467},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { TopBar } from '@/components/layout/topbar';\nimport { MetricsCards } from '@/components/dashboard/metrics-cards';\nimport { ApprovalPipeline } from '@/components/dashboard/approval-pipeline';\nimport { QuickActions } from '@/components/dashboard/quick-actions';\nimport { RecentClientsTable } from '@/components/dashboard/recent-clients-table';\nimport { PendingTasksTable } from '@/components/dashboard/pending-tasks-table';\nimport { useAuthenticatedRequest } from '@/hooks/use-auth';\nimport { queryClient } from '@/lib/queryClient';\nimport type { DashboardMetrics } from '@/types';\n\nexport default function Dashboard() {\n  const makeRequest = useAuthenticatedRequest();\n\n  const { data: metrics, isLoading } = useQuery<DashboardMetrics>({\n    queryKey: ['/api/dashboard/metrics'],\n    queryFn: async () => {\n      const response = await makeRequest('GET', '/api/dashboard/metrics');\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const handleMarkTaskComplete = async (taskId: string) => {\n    try {\n      await makeRequest('PUT', `/api/tasks/${taskId}`, { status: 'completed' });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n    } catch (error) {\n      console.error('Failed to mark task as complete:', error);\n    }\n  };\n\n  if (!metrics && !isLoading) {\n    return (\n      <div className=\"flex-1 overflow-y-auto\">\n        <TopBar \n          title=\"Dashboard\" \n          subtitle=\"Welcome back, manage your solar business operations\" \n        />\n        <main className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Failed to load dashboard data</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Dashboard\" \n        subtitle=\"Welcome back, manage your solar business operations\" \n      />\n      \n      <main className=\"p-6\">\n        {/* Metrics Cards */}\n        {metrics ? (\n          <MetricsCards metrics={metrics} isLoading={isLoading} />\n        ) : (\n          <MetricsCards \n            metrics={{\n              totalClients: 0,\n              activeProjects: 0,\n              pendingApprovals: 0,\n              monthlyRevenue: \"â‚¹0L\",\n              approvalPipeline: [],\n              lowStockItems: [],\n              recentClients: [],\n              pendingTasks: []\n            }} \n            isLoading={isLoading} \n          />\n        )}\n\n        {/* Main Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6\">\n          <ApprovalPipeline \n            pipeline={metrics?.approvalPipeline || []} \n            isLoading={isLoading} \n          />\n          <QuickActions \n            lowStockItems={metrics?.lowStockItems || []} \n            isLoading={isLoading} \n          />\n        </div>\n\n        {/* Data Tables */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n          <RecentClientsTable \n            clients={metrics?.recentClients || []} \n            isLoading={isLoading} \n          />\n          <PendingTasksTable \n            tasks={metrics?.pendingTasks || []} \n            isLoading={isLoading}\n            onMarkComplete={handleMarkTaskComplete}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3440},"client/src/pages/finance.tsx":{"content":"import { TopBar } from '@/components/layout/topbar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  IndianRupee, \n  FileText, \n  CreditCard, \n  TrendingUp,\n  Plus,\n  Eye,\n  Download \n} from 'lucide-react';\n\nexport default function Finance() {\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Finance\" \n        subtitle=\"Manage invoices, quotations, and payment tracking\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Financial Overview</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Track your revenue, invoices, and payments\n            </p>\n          </div>\n          <Button data-testid=\"button-create-invoice\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Invoice\n          </Button>\n        </div>\n\n        {/* Financial Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <IndianRupee className=\"h-8 w-8 text-green-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">â‚¹12.5L</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <FileText className=\"h-8 w-8 text-blue-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">0</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Invoices</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"h-8 w-8 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">â‚¹0</p>\n                  <p className=\"text-sm text-muted-foreground\">Pending Payments</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-primary mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">0%</p>\n                  <p className=\"text-sm text-muted-foreground\">Growth Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Invoices List */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Invoices</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8\">\n              <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\">No invoices found</p>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Create your first invoice to start tracking payments and revenue.\n              </p>\n              <Button data-testid=\"button-create-first-invoice\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Your First Invoice\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":3761},"client/src/pages/inventory.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { TopBar } from '@/components/layout/topbar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { Package, Plus, AlertTriangle } from 'lucide-react';\nimport type { Inventory } from '@/types';\n\nexport default function Inventory() {\n  const { data: inventory = [], isLoading } = useQuery<Inventory[]>({\n    queryKey: ['/api/inventory'],\n  });\n\n  const isLowStock = (item: Inventory) => item.quantity <= item.threshold;\n  const isCriticalStock = (item: Inventory) => item.quantity <= 5;\n\n  const getStockBadgeVariant = (item: Inventory) => {\n    if (isCriticalStock(item)) return 'destructive';\n    if (isLowStock(item)) return 'secondary';\n    return 'outline';\n  };\n\n  const getStockBadgeText = (item: Inventory) => {\n    if (isCriticalStock(item)) return 'Critical';\n    if (isLowStock(item)) return 'Low Stock';\n    return 'In Stock';\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Inventory\" \n        subtitle=\"Manage your solar equipment and stock levels\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Stock Management</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {inventory.length} item{inventory.length !== 1 ? 's' : ''} in inventory\n            </p>\n          </div>\n          <Button data-testid=\"button-add-inventory\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add Item\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Package className=\"h-8 w-8 text-primary mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{inventory.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Items</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {inventory.filter(isLowStock).length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Low Stock Items</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-red-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {inventory.filter(isCriticalStock).length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Critical Stock</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Inventory Items</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                ))}\n              </div>\n            ) : inventory.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">No inventory items found</p>\n                <Button data-testid=\"button-add-first-item\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Your First Item\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Item Name</TableHead>\n                      <TableHead>Description</TableHead>\n                      <TableHead>Current Stock</TableHead>\n                      <TableHead>Threshold</TableHead>\n                      <TableHead>Unit Price</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {inventory.map((item) => (\n                      <TableRow key={item.id} data-testid={`inventory-row-${item.id}`}>\n                        <TableCell className=\"font-medium\" data-testid={`text-item-name-${item.id}`}>\n                          {item.itemName}\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground max-w-48 truncate\">\n                          {item.description || 'No description'}\n                        </TableCell>\n                        <TableCell data-testid={`text-quantity-${item.id}`}>\n                          <span className={isCriticalStock(item) ? 'text-red-600 font-semibold' : ''}>\n                            {item.quantity}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {item.threshold}\n                        </TableCell>\n                        <TableCell data-testid={`text-price-${item.id}`}>\n                          {item.unitPrice ? `â‚¹${item.unitPrice}` : 'Not set'}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getStockBadgeVariant(item)}\n                            data-testid={`badge-stock-status-${item.id}`}\n                          >\n                            {getStockBadgeText(item)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              data-testid={`button-edit-item-${item.id}`}\n                            >\n                              Edit\n                            </Button>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              data-testid={`button-request-stock-${item.id}`}\n                            >\n                              Request\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7460},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Loader2, Sun } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { loginSchema, type LoginCredentials } from '@/types';\n\nexport default function Login() {\n  const [error, setError] = useState<string>('');\n  const { login, isLoading } = useAuth();\n\n  const form = useForm<LoginCredentials>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const handleSubmit = async (data: LoginCredentials) => {\n    try {\n      setError('');\n      await login(data);\n    } catch (err: any) {\n      setError(err.message || 'Login failed. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Sun className=\"h-6 w-6 text-primary-foreground\" />\n            </div>\n            <span className=\"text-2xl font-bold\">SolarFlow</span>\n          </div>\n          <CardTitle>Welcome back</CardTitle>\n          <CardDescription>\n            Sign in to your account to manage your solar business operations\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              {error && (\n                <Alert variant=\"destructive\" data-testid=\"alert-login-error\">\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Sign In\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Demo Credentials:</p>\n            <div className=\"space-y-1 text-sm\">\n              <div><strong>Admin:</strong> admin@solarflow.com / password123</div>\n              <div><strong>Agent:</strong> priya@solarflow.com / password123</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4360},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { TopBar } from '@/components/layout/topbar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { \n  TrendingUp, \n  Download, \n  FileText, \n  Users, \n  Package,\n  CreditCard,\n  BarChart3,\n  PieChart,\n  FileSpreadsheet\n} from 'lucide-react';\nimport { formatDistanceToNow, format } from 'date-fns';\nimport { useAuth } from '@/hooks/use-auth';\nimport type { ClientWithAgent, TaskWithClient, Inventory, DashboardMetrics } from '@/types';\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState<string>('overview');\n  const [dateRange, setDateRange] = useState<string>('30');\n  \n  const { user } = useAuth();\n\n  const { data: clients = [] } = useQuery<ClientWithAgent[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const { data: tasks = [] } = useQuery<TaskWithClient[]>({\n    queryKey: ['/api/tasks'],\n  });\n\n  const { data: inventory = [] } = useQuery<Inventory[]>({\n    queryKey: ['/api/inventory'],\n  });\n\n  const { data: metrics } = useQuery<DashboardMetrics>({\n    queryKey: ['/api/dashboard/metrics'],\n  });\n\n  const generateReport = (type: string) => {\n    // In a real implementation, this would trigger a download\n    console.log(`Generating ${type} report for the last ${dateRange} days`);\n  };\n\n  const reportTypes = [\n    { value: 'overview', label: 'Business Overview', icon: BarChart3 },\n    { value: 'clients', label: 'Client Report', icon: Users },\n    { value: 'approvals', label: 'Approval Status', icon: FileText },\n    { value: 'inventory', label: 'Inventory Report', icon: Package },\n    { value: 'finance', label: 'Financial Report', icon: CreditCard },\n    { value: 'performance', label: 'Agent Performance', icon: TrendingUp },\n  ];\n\n  const exportFormats = [\n    { value: 'pdf', label: 'PDF Report', icon: FileText },\n    { value: 'excel', label: 'Excel Spreadsheet', icon: FileSpreadsheet },\n  ];\n\n  const getClientStatusCounts = () => {\n    return {\n      lead: clients.filter(c => c.projectStatus === 'lead').length,\n      inProgress: clients.filter(c => c.projectStatus === 'in-progress').length,\n      completed: clients.filter(c => c.projectStatus === 'completed').length,\n    };\n  };\n\n  const getInventoryAlerts = () => {\n    return inventory.filter(item => item.quantity <= item.threshold);\n  };\n\n  const getTaskStats = () => {\n    return {\n      total: tasks.length,\n      pending: tasks.filter(t => t.status === 'pending').length,\n      completed: tasks.filter(t => t.status === 'completed').length,\n      overdue: tasks.filter(t => \n        t.dueDate && new Date() > new Date(t.dueDate) && t.status === 'pending'\n      ).length,\n    };\n  };\n\n  const statusCounts = getClientStatusCounts();\n  const inventoryAlerts = getInventoryAlerts();\n  const taskStats = getTaskStats();\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Reports\" \n        subtitle=\"Generate and export business reports and analytics\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Business Reports</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Analyze your business performance and export data\n            </p>\n          </div>\n        </div>\n\n        {/* Report Controls */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <label className=\"block text-sm font-medium mb-2\">Report Type</label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue placeholder=\"Select report type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {reportTypes.map((type) => {\n                    const Icon = type.icon;\n                    return (\n                      <SelectItem key={type.value} value={type.value}>\n                        <div className=\"flex items-center space-x-2\">\n                          <Icon className=\"h-4 w-4\" />\n                          <span>{type.label}</span>\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <label className=\"block text-sm font-medium mb-2\">Date Range</label>\n              <Select value={dateRange} onValueChange={setDateRange}>\n                <SelectTrigger data-testid=\"select-date-range\">\n                  <SelectValue placeholder=\"Select date range\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90\">Last 3 months</SelectItem>\n                  <SelectItem value=\"365\">Last year</SelectItem>\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <label className=\"block text-sm font-medium mb-2\">Export Format</label>\n              <div className=\"flex space-x-2\">\n                {exportFormats.map((format) => {\n                  const Icon = format.icon;\n                  return (\n                    <Button\n                      key={format.value}\n                      variant=\"outline\"\n                      onClick={() => generateReport(format.value)}\n                      className=\"flex-1\"\n                      data-testid={`button-export-${format.value}`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-2\" />\n                      {format.label}\n                    </Button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Report Content Based on Selection */}\n        {reportType === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-8 w-8 text-primary mr-3\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\">{clients.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">Total Clients</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-8 w-8 text-green-600 mr-3\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\">{statusCounts.inProgress}</p>\n                      <p className=\"text-sm text-muted-foreground\">Active Projects</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <Package className=\"h-8 w-8 text-yellow-600 mr-3\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\">{inventoryAlerts.length}</p>\n                      <p className=\"text-sm text-muted-foreground\">Low Stock Items</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"h-8 w-8 text-blue-600 mr-3\" />\n                    <div>\n                      <p className=\"text-2xl font-bold\">{taskStats.pending}</p>\n                      <p className=\"text-sm text-muted-foreground\">Pending Tasks</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Approval Pipeline Progress */}\n            {metrics && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Approval Pipeline Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                    {metrics.approvalPipeline.map((step, index) => (\n                      <div key={step.step} className=\"text-center p-4 border rounded-lg\">\n                        <div className={`w-3 h-3 bg-blue-${(index + 1) * 100} rounded-full mx-auto mb-2`}></div>\n                        <h4 className=\"font-semibold text-sm mb-1 capitalize\">{step.step.replace('_', ' ')}</h4>\n                        <p className=\"text-lg font-bold\">{step.count}</p>\n                        <p className=\"text-xs text-muted-foreground\">{step.percentage}% complete</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {reportType === 'clients' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Client Report</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Client Name</TableHead>\n                      <TableHead>Contact</TableHead>\n                      <TableHead>Agent</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Created Date</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {clients.map((client) => (\n                      <TableRow key={client.id} data-testid={`client-report-row-${client.id}`}>\n                        <TableCell className=\"font-medium\">{client.name}</TableCell>\n                        <TableCell>\n                          <div>\n                            <p className=\"text-sm\">{client.phone}</p>\n                            {client.email && (\n                              <p className=\"text-xs text-muted-foreground\">{client.email}</p>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>{client.assignedAgent?.name || 'Unassigned'}</TableCell>\n                        <TableCell>\n                          <Badge variant={\n                            client.projectStatus === 'completed' ? 'default' :\n                            client.projectStatus === 'in-progress' ? 'secondary' : 'outline'\n                          }>\n                            {client.projectStatus.replace('-', ' ')}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>{format(new Date(client.createdAt), 'MMM dd, yyyy')}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {reportType === 'inventory' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Inventory Report</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Item Name</TableHead>\n                      <TableHead>Current Stock</TableHead>\n                      <TableHead>Threshold</TableHead>\n                      <TableHead>Unit Price</TableHead>\n                      <TableHead>Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {inventory.map((item) => (\n                      <TableRow key={item.id} data-testid={`inventory-report-row-${item.id}`}>\n                        <TableCell className=\"font-medium\">{item.itemName}</TableCell>\n                        <TableCell>\n                          <span className={item.quantity <= item.threshold ? 'text-red-600 font-semibold' : ''}>\n                            {item.quantity}\n                          </span>\n                        </TableCell>\n                        <TableCell>{item.threshold}</TableCell>\n                        <TableCell>{item.unitPrice ? `â‚¹${item.unitPrice}` : 'Not set'}</TableCell>\n                        <TableCell>\n                          <Badge variant={\n                            item.quantity <= 5 ? 'destructive' :\n                            item.quantity <= item.threshold ? 'secondary' : 'outline'\n                          }>\n                            {item.quantity <= 5 ? 'Critical' :\n                             item.quantity <= item.threshold ? 'Low Stock' : 'In Stock'}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {reportType === 'performance' && user?.role === 'admin' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Agent Performance Report</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <TrendingUp className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">Agent performance tracking coming soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  This section will show detailed performance metrics for each agent including \n                  client handling, task completion rates, and revenue generation.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {reportType === 'finance' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Financial Report</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <CreditCard className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">Financial reporting coming soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  This section will include revenue analysis, payment tracking, \n                  outstanding amounts, and profit margins.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {reportType === 'approvals' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Government Approval Status Report</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">Approval status reporting coming soon</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  This section will show detailed approval progress, pending submissions, \n                  and completion timelines for all government approval stages.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":16241},"client/src/pages/tasks.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { TopBar } from '@/components/layout/topbar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { \n  CheckSquare, \n  Plus, \n  Edit, \n  Clock, \n  AlertTriangle,\n  CheckCircle,\n  Calendar\n} from 'lucide-react';\nimport { formatDistanceToNow, isAfter, format } from 'date-fns';\nimport { useAuthenticatedRequest, useAuth } from '@/hooks/use-auth';\nimport { queryClient } from '@/lib/queryClient';\nimport { insertTaskSchema, type InsertTask, type TaskWithClient, type ClientWithAgent } from '@/types';\nimport { z } from 'zod';\n\nconst createTaskSchema = insertTaskSchema.extend({\n  dueDate: z.string().optional(),\n});\n\ntype CreateTaskData = z.infer<typeof createTaskSchema>;\n\nexport default function Tasks() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState<TaskWithClient | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>('');\n  const [filterClient, setFilterClient] = useState<string>('');\n  \n  const { user } = useAuth();\n  const makeRequest = useAuthenticatedRequest();\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<TaskWithClient[]>({\n    queryKey: ['/api/tasks'],\n  });\n\n  const { data: clients = [] } = useQuery<ClientWithAgent[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const form = useForm<CreateTaskData>({\n    resolver: zodResolver(createTaskSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      clientId: '',\n      assignedAgentId: '',\n      dueDate: '',\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: CreateTaskData) => {\n      const taskData: InsertTask = {\n        ...data,\n        dueDate: data.dueDate ? new Date(data.dueDate) : null,\n      };\n      await makeRequest('POST', '/api/tasks', taskData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTask> }) => {\n      await makeRequest('PUT', `/api/tasks/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n    },\n  });\n\n  const handleCreateTask = (data: CreateTaskData) => {\n    createTaskMutation.mutate(data);\n  };\n\n  const handleMarkComplete = (task: TaskWithClient) => {\n    updateTaskMutation.mutate({\n      id: task.id,\n      data: { status: 'completed' },\n    });\n  };\n\n  const handleMarkPending = (task: TaskWithClient) => {\n    updateTaskMutation.mutate({\n      id: task.id,\n      data: { status: 'pending' },\n    });\n  };\n\n  const getPriorityColor = (task: TaskWithClient) => {\n    if (!task.dueDate) return 'bg-blue-500';\n    \n    const now = new Date();\n    const dueDate = new Date(task.dueDate);\n    \n    if (isAfter(now, dueDate)) return 'bg-red-500'; // Overdue\n    \n    const daysDiff = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysDiff <= 1) return 'bg-red-500'; // Due today/tomorrow\n    if (daysDiff <= 3) return 'bg-yellow-500'; // Due soon\n    \n    return 'bg-green-500'; // Not urgent\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'overdue':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'default';\n      case 'overdue':\n        return 'destructive';\n      case 'pending':\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getDueDateText = (dueDate: Date | string | null) => {\n    if (!dueDate) return 'No due date';\n    \n    const due = new Date(dueDate);\n    const now = new Date();\n    \n    if (isAfter(now, due)) {\n      return `Overdue by ${formatDistanceToNow(due)}`;\n    }\n    \n    return `Due ${formatDistanceToNow(due, { addSuffix: true })}`;\n  };\n\n  const isOverdue = (dueDate: Date | string | null) => {\n    if (!dueDate) return false;\n    return isAfter(new Date(), new Date(dueDate));\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (filterStatus && task.status !== filterStatus) return false;\n    if (filterClient && task.clientId !== filterClient) return false;\n    return true;\n  });\n\n  const taskStats = {\n    total: tasks.length,\n    pending: tasks.filter(t => t.status === 'pending').length,\n    completed: tasks.filter(t => t.status === 'completed').length,\n    overdue: tasks.filter(t => t.dueDate && isOverdue(t.dueDate)).length,\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto\">\n      <TopBar \n        title=\"Tasks & Reminders\" \n        subtitle=\"Manage tasks, follow-ups, and automated reminders\" \n      />\n      \n      <main className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Task Management</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Stay on top of all project tasks and deadlines\n            </p>\n          </div>\n          <Button onClick={() => setIsCreateModalOpen(true)} data-testid=\"button-create-task\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Task\n          </Button>\n        </div>\n\n        {/* Task Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckSquare className=\"h-8 w-8 text-primary mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{taskStats.total}</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Tasks</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-8 w-8 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{taskStats.pending}</p>\n                  <p className=\"text-sm text-muted-foreground\">Pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-green-600\">{taskStats.completed}</p>\n                  <p className=\"text-sm text-muted-foreground\">Completed</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-red-600 mr-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold text-red-600\">{taskStats.overdue}</p>\n                  <p className=\"text-sm text-muted-foreground\">Overdue</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex space-x-4 mb-6\">\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Statuses</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Select value={filterClient} onValueChange={setFilterClient}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-client-filter\">\n              <SelectValue placeholder=\"Filter by client\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"\">All Clients</SelectItem>\n              {clients.map((client) => (\n                <SelectItem key={client.id} value={client.id}>\n                  {client.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Tasks Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>All Tasks</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {tasksLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n                ))}\n              </div>\n            ) : filteredTasks.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <CheckSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">No tasks found</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Create your first task to start tracking project activities.\n                </p>\n                <Button onClick={() => setIsCreateModalOpen(true)} data-testid=\"button-create-first-task\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Your First Task\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Task</TableHead>\n                      <TableHead>Client</TableHead>\n                      <TableHead>Assigned To</TableHead>\n                      <TableHead>Due Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTasks.map((task) => (\n                      <TableRow key={task.id} data-testid={`task-row-${task.id}`}>\n                        <TableCell>\n                          <div className=\"flex items-start space-x-3\">\n                            <div className={`w-2 h-2 ${getPriorityColor(task)} rounded-full mt-2 flex-shrink-0`}></div>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`text-task-title-${task.id}`}>\n                                {task.title}\n                              </p>\n                              {task.description && (\n                                <p className=\"text-sm text-muted-foreground max-w-64 truncate\">\n                                  {task.description}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {task.client.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\">{task.client.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Avatar className=\"h-6 w-6\">\n                              <AvatarFallback className=\"text-xs\">\n                                {task.assignedAgent.name.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"text-sm\">{task.assignedAgent.name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {task.dueDate ? (\n                              <div>\n                                <p>{format(new Date(task.dueDate), 'MMM dd, yyyy')}</p>\n                                <p className={`text-xs ${isOverdue(task.dueDate) ? 'text-red-600' : 'text-muted-foreground'}`}>\n                                  {getDueDateText(task.dueDate)}\n                                </p>\n                              </div>\n                            ) : (\n                              <span className=\"text-muted-foreground\">No due date</span>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusIcon(task.status)}\n                            <Badge variant={getStatusVariant(task.status)}>\n                              {task.status.charAt(0).toUpperCase() + task.status.slice(1)}\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            {task.status === 'pending' ? (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleMarkComplete(task)}\n                                data-testid={`button-complete-task-${task.id}`}\n                              >\n                                <CheckCircle className=\"h-4 w-4\" />\n                              </Button>\n                            ) : (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleMarkPending(task)}\n                                data-testid={`button-reopen-task-${task.id}`}\n                              >\n                                <Clock className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`button-edit-task-${task.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Task Modal */}\n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogContent data-testid=\"modal-create-task\">\n            <DialogHeader>\n              <DialogTitle>Create New Task</DialogTitle>\n            </DialogHeader>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleCreateTask)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Task Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter task title\" {...field} data-testid=\"input-task-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter task description\" \n                          rows={3} \n                          {...field} \n                          data-testid=\"textarea-task-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Client</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-task-client\">\n                              <SelectValue placeholder=\"Select client\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {clients.map((client) => (\n                              <SelectItem key={client.id} value={client.id}>\n                                {client.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"assignedAgentId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Assign To</FormLabel>\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value}\n                          defaultValue={user?.role === 'agent' ? user.id : ''}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-task-agent\">\n                              <SelectValue placeholder=\"Select agent\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {clients.map((client) => \n                              client.assignedAgent ? (\n                                <SelectItem key={client.assignedAgent.id} value={client.assignedAgent.id}>\n                                  {client.assignedAgent.name}\n                                </SelectItem>\n                              ) : null\n                            ).filter((item, index, self) => \n                              index === self.findIndex(t => t?.key === item?.key)\n                            )}\n                            {user?.role === 'agent' && (\n                              <SelectItem value={user.id}>{user.name} (Me)</SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"dueDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Due Date (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field} \n                          data-testid=\"input-task-due-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateModalOpen(false)}\n                    data-testid=\"button-cancel-task\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createTaskMutation.isPending}\n                    data-testid=\"button-save-task\"\n                  >\n                    {createTaskMutation.isPending ? 'Creating...' : 'Create Task'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":22277},"client/src/types/index.ts":{"content":"export interface AuthUser {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'agent';\n}\n\nexport interface AuthState {\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport * from '@shared/schema';\n","size_bytes":244},"client/src/components/dashboard/approval-pipeline.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport type { DashboardMetrics } from '@/types';\n\ninterface ApprovalPipelineProps {\n  pipeline: DashboardMetrics['approvalPipeline'];\n  isLoading?: boolean;\n}\n\nexport function ApprovalPipeline({ pipeline, isLoading }: ApprovalPipelineProps) {\n  const stepLabels = {\n    application: 'Application Submission',\n    verification: 'Document Verification',\n    inspection: 'Site Inspection',\n    noc: 'NOC Issuance',\n    clearance: 'Final Installation Clearance',\n  };\n\n  const stepColors = [\n    'bg-blue-500',\n    'bg-green-500', \n    'bg-yellow-500',\n    'bg-purple-500',\n    'bg-red-500',\n  ];\n\n  if (isLoading) {\n    return (\n      <Card className=\"lg:col-span-2 animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <div key={i} className=\"h-12 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"lg:col-span-2 shadow-sm\" data-testid=\"card-approval-pipeline\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Government Approval Pipeline</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-approvals\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {pipeline.map((step, index) => (\n            <div\n              key={step.step}\n              className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\"\n              data-testid={`approval-step-${step.step}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 ${stepColors[index]} rounded-full`}></div>\n                <span className=\"text-sm font-medium\">\n                  {stepLabels[step.step as keyof typeof stepLabels]}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\" data-testid={`text-step-count-${step.step}`}>\n                  {step.count} clients\n                </span>\n                <div className=\"w-16\">\n                  <Progress value={step.percentage} className=\"h-2\" />\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2714},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { Users, FolderOpen, Clock, IndianRupee, TrendingUp, AlertTriangle } from 'lucide-react';\nimport type { DashboardMetrics } from '@/types';\n\ninterface MetricsCardsProps {\n  metrics: DashboardMetrics;\n  isLoading?: boolean;\n}\n\nexport function MetricsCards({ metrics, isLoading }: MetricsCardsProps) {\n  const cards = [\n    {\n      title: 'Total Clients',\n      value: metrics.totalClients.toString(),\n      icon: Users,\n      trend: '+12% from last month',\n      trendUp: true,\n      bgColor: 'bg-primary/10',\n      iconColor: 'text-primary',\n    },\n    {\n      title: 'Active Projects',\n      value: metrics.activeProjects.toString(),\n      icon: FolderOpen,\n      trend: '+8% from last month',\n      trendUp: true,\n      bgColor: 'bg-green-100',\n      iconColor: 'text-green-600',\n    },\n    {\n      title: 'Pending Approvals',\n      value: metrics.pendingApprovals.toString(),\n      icon: Clock,\n      trend: '5 overdue items',\n      trendUp: false,\n      bgColor: 'bg-yellow-100',\n      iconColor: 'text-yellow-600',\n    },\n    {\n      title: 'Monthly Revenue',\n      value: metrics.monthlyRevenue,\n      icon: IndianRupee,\n      trend: '+15% from last month',\n      trendUp: true,\n      bgColor: 'bg-green-100',\n      iconColor: 'text-green-600',\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-16 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n      {cards.map((card) => {\n        const Icon = card.icon;\n        const TrendIcon = card.trendUp ? TrendingUp : AlertTriangle;\n        \n        return (\n          <Card key={card.title} className=\"shadow-sm\" data-testid={`card-metric-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">{card.title}</p>\n                  <p className=\"text-2xl font-bold\" data-testid={`text-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {card.value}\n                  </p>\n                </div>\n                <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                  <Icon className={`h-6 w-6 ${card.iconColor}`} />\n                </div>\n              </div>\n              <div className={`flex items-center mt-2 text-sm ${card.trendUp ? 'text-green-600' : 'text-red-600'}`}>\n                <TrendIcon className=\"h-4 w-4 mr-1\" />\n                <span data-testid={`text-trend-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {card.trend}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3152},"client/src/components/dashboard/pending-tasks-table.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { formatDistanceToNow } from 'date-fns';\nimport { isAfter } from 'date-fns';\nimport type { DashboardMetrics } from '@/types';\n\ninterface PendingTasksTableProps {\n  tasks: DashboardMetrics['pendingTasks'];\n  isLoading?: boolean;\n  onMarkComplete?: (taskId: string) => void;\n}\n\nexport function PendingTasksTable({ tasks, isLoading, onMarkComplete }: PendingTasksTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getPriorityColor = (task: typeof tasks[0]) => {\n    if (!task.dueDate) return 'bg-blue-500';\n    \n    const now = new Date();\n    const dueDate = new Date(task.dueDate);\n    \n    if (isAfter(now, dueDate)) return 'bg-red-500'; // Overdue\n    \n    const daysDiff = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    if (daysDiff <= 1) return 'bg-red-500'; // Due today/tomorrow\n    if (daysDiff <= 3) return 'bg-yellow-500'; // Due soon\n    \n    return 'bg-green-500'; // Not urgent\n  };\n\n  const getDueDateText = (dueDate: Date | string | null) => {\n    if (!dueDate) return 'No due date';\n    \n    const due = new Date(dueDate);\n    const now = new Date();\n    \n    if (isAfter(now, due)) {\n      return `Overdue by ${formatDistanceToNow(due)}`;\n    }\n    \n    return `Due ${formatDistanceToNow(due, { addSuffix: true })}`;\n  };\n\n  return (\n    <Card className=\"shadow-sm\" data-testid=\"card-pending-tasks\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Pending Tasks</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-tasks\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {tasks.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>No pending tasks</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {tasks.map((task) => (\n              <div\n                key={task.id}\n                className=\"flex items-start space-x-3 p-3 rounded-lg bg-muted/30\"\n                data-testid={`task-${task.id}`}\n              >\n                <div className={`w-2 h-2 ${getPriorityColor(task)} rounded-full mt-2 flex-shrink-0`}></div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium\" data-testid={`text-task-title-${task.id}`}>\n                    {task.title} - {task.client.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`text-task-agent-${task.id}`}>\n                    Assigned to {task.assignedAgent.name}\n                  </p>\n                  <div className=\"flex items-center mt-1 space-x-2\">\n                    <Badge \n                      variant={task.dueDate && isAfter(new Date(), new Date(task.dueDate)) ? \"destructive\" : \"secondary\"}\n                      className=\"text-xs\"\n                      data-testid={`badge-due-date-${task.id}`}\n                    >\n                      {getDueDateText(task.dueDate)}\n                    </Badge>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => onMarkComplete?.(task.id)}\n                  className=\"text-xs text-primary hover:text-primary/80 flex-shrink-0\"\n                  data-testid={`button-complete-task-${task.id}`}\n                >\n                  Mark Complete\n                </Button>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4140},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  UserPlus, \n  Upload, \n  Receipt, \n  Package,\n} from 'lucide-react';\nimport type { DashboardMetrics } from '@/types';\n\ninterface QuickActionsProps {\n  lowStockItems: DashboardMetrics['lowStockItems'];\n  isLoading?: boolean;\n}\n\nexport function QuickActions({ lowStockItems, isLoading }: QuickActionsProps) {\n  const actions = [\n    {\n      icon: UserPlus,\n      label: 'Add New Client',\n      color: 'text-primary',\n      testId: 'button-add-client',\n    },\n    {\n      icon: Upload,\n      label: 'Upload Documents',\n      color: 'text-green-600',\n      testId: 'button-upload-documents',\n    },\n    {\n      icon: Receipt,\n      label: 'Generate Invoice',\n      color: 'text-blue-600',\n      testId: 'button-generate-invoice',\n    },\n    {\n      icon: Package,\n      label: 'Stock Request',\n      color: 'text-purple-600',\n      testId: 'button-stock-request',\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <Card className=\"animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-muted rounded w-1/2\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"h-12 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm\" data-testid=\"card-quick-actions\">\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {actions.map((action) => {\n            const Icon = action.icon;\n            return (\n              <Button\n                key={action.label}\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                data-testid={action.testId}\n              >\n                <Icon className={`h-5 w-5 mr-3 ${action.color}`} />\n                <span className=\"text-sm\">{action.label}</span>\n              </Button>\n            );\n          })}\n        </div>\n        \n        {/* Stock Alerts */}\n        {lowStockItems.length > 0 && (\n          <div className=\"mt-6 pt-4 border-t border-border\">\n            <h4 className=\"text-sm font-semibold text-muted-foreground mb-3\">Stock Alerts</h4>\n            <div className=\"space-y-2\">\n              {lowStockItems.slice(0, 2).map((item) => (\n                <div \n                  key={item.id} \n                  className=\"flex items-center justify-between text-sm\"\n                  data-testid={`stock-alert-${item.id}`}\n                >\n                  <span>{item.itemName}</span>\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    {item.quantity <= 5 ? 'Critical' : 'Low Stock'}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3068},"client/src/components/dashboard/recent-clients-table.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { DashboardMetrics } from '@/types';\n\ninterface RecentClientsTableProps {\n  clients: DashboardMetrics['recentClients'];\n  isLoading?: boolean;\n}\n\nexport function RecentClientsTable({ clients, isLoading }: RecentClientsTableProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"animate-pulse\">\n        <CardHeader>\n          <div className=\"h-6 bg-muted rounded w-1/3\"></div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusVariant = (status: string) => {\n    switch (status) {\n      case 'in-progress':\n        return 'default';\n      case 'lead':\n        return 'secondary';\n      case 'completed':\n        return 'outline';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'in-progress':\n        return 'In Progress';\n      case 'lead':\n        return 'Lead';\n      case 'completed':\n        return 'Completed';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <Card className=\"shadow-sm\" data-testid=\"card-recent-clients\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Clients</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-clients\">\n            View All\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {clients.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <p>No clients found</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-border\">\n                  <th className=\"text-left py-3 px-0 text-sm font-medium text-muted-foreground\">Name</th>\n                  <th className=\"text-left py-3 px-0 text-sm font-medium text-muted-foreground\">Agent</th>\n                  <th className=\"text-left py-3 px-0 text-sm font-medium text-muted-foreground\">Status</th>\n                  <th className=\"text-left py-3 px-0 text-sm font-medium text-muted-foreground\">Date</th>\n                </tr>\n              </thead>\n              <tbody>\n                {clients.map((client) => (\n                  <tr \n                    key={client.id} \n                    className=\"border-b border-border/50\"\n                    data-testid={`client-row-${client.id}`}\n                  >\n                    <td className=\"py-3 px-0\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback className=\"text-xs\">\n                            {client.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"text-sm font-medium\" data-testid={`text-client-name-${client.id}`}>\n                            {client.name}\n                          </p>\n                          {client.phone && (\n                            <p className=\"text-xs text-muted-foreground\">{client.phone}</p>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-0 text-sm\" data-testid={`text-agent-name-${client.id}`}>\n                      {client.assignedAgent?.name || 'Unassigned'}\n                    </td>\n                    <td className=\"py-3 px-0\">\n                      <Badge variant={getStatusVariant(client.projectStatus)} data-testid={`badge-status-${client.id}`}>\n                        {getStatusLabel(client.projectStatus)}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3 px-0 text-sm text-muted-foreground\" data-testid={`text-date-${client.id}`}>\n                      {formatDistanceToNow(new Date(client.createdAt), { addSuffix: true })}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4675},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport {\n  BarChart3,\n  Users,\n  FileCheck,\n  Bus,\n  Package,\n  CreditCard,\n  CheckSquare,\n  TrendingUp,\n  Settings,\n  LogOut,\n  Sun,\n} from 'lucide-react';\n\ninterface NavItem {\n  href: string;\n  label: string;\n  icon: typeof BarChart3;\n  adminOnly?: boolean;\n}\n\nconst navItems: NavItem[] = [\n  { href: '/dashboard', label: 'Dashboard', icon: BarChart3 },\n  { href: '/clients', label: 'Clients', icon: Users },\n  { href: '/approvals', label: 'Government Approvals', icon: FileCheck },\n  { href: '/agents', label: 'Agents', icon: Bus, adminOnly: true },\n  { href: '/inventory', label: 'Inventory', icon: Package },\n  { href: '/finance', label: 'Finance', icon: CreditCard },\n  { href: '/tasks', label: 'Tasks & Reminders', icon: CheckSquare },\n  { href: '/reports', label: 'Reports', icon: TrendingUp },\n];\n\nexport function Sidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  const filteredNavItems = navItems.filter(item => \n    !item.adminOnly || user?.role === 'admin'\n  );\n\n  return (\n    <div className=\"w-64 bg-card shadow-lg border-r border-border h-full\">\n      <div className=\"p-6\">\n        {/* Logo */}\n        <div className=\"flex items-center space-x-2 mb-8\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Sun className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-bold\">SolarFlow</span>\n        </div>\n        \n        {/* User Profile */}\n        <div className=\"flex items-center space-x-3 p-3 bg-muted rounded-lg mb-6\" data-testid=\"user-profile\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-primary-foreground text-sm font-medium\">\n              {user?.name.charAt(0).toUpperCase()}\n            </span>\n          </div>\n          <div>\n            <p className=\"font-semibold text-sm\" data-testid=\"text-username\">{user?.name}</p>\n            <p className=\"text-xs text-muted-foreground capitalize\" data-testid=\"text-userrole\">\n              {user?.role}\n            </p>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"space-y-2\">\n          {filteredNavItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <Link key={item.href} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                    isActive\n                      ? \"bg-accent text-accent-foreground font-medium\"\n                      : \"hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  data-testid={`nav-${item.href.replace('/', '')}`}\n                >\n                  <Icon className=\"w-5 h-5\" />\n                  <span>{item.label}</span>\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Bottom Actions */}\n        <div className=\"mt-8 pt-4 border-t border-border space-y-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-settings\"\n          >\n            <Settings className=\"w-5 h-5 mr-3\" />\n            Settings\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={logout}\n            className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-5 h-5 mr-3\" />\n            Sign Out\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3937},"client/src/components/layout/topbar.tsx":{"content":"import { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Bell, Search } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\ninterface TopBarProps {\n  title: string;\n  subtitle: string;\n}\n\nexport function TopBar({ title, subtitle }: TopBarProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\" data-testid=\"text-pagetitle\">{title}</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-pagesubtitle\">{subtitle}</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search clients, agents...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 w-64 bg-background\"\n              data-testid=\"input-search\"\n            />\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          </div>\n          \n          {/* Notifications */}\n          <div className=\"relative\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\">\n              <Bell className=\"h-5 w-5 text-muted-foreground\" />\n            </Button>\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n              data-testid=\"badge-notification-count\"\n            >\n              3\n            </Badge>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1860},"client/src/components/modals/client-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2 } from 'lucide-react';\nimport { insertClientSchema, type InsertClient, type ClientWithAgent, type User } from '@/types';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuthenticatedRequest } from '@/hooks/use-auth';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface ClientModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  client?: ClientWithAgent;\n  onSave?: () => void;\n}\n\nexport function ClientModal({ open, onOpenChange, client, onSave }: ClientModalProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const makeRequest = useAuthenticatedRequest();\n\n  // Fetch agents for assignment\n  const { data: agents } = useQuery({\n    queryKey: ['/api/users'],\n    enabled: open,\n  });\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      address: '',\n      assignedAgentId: undefined,\n      projectStatus: 'lead',\n    },\n  });\n\n  useEffect(() => {\n    if (client && open) {\n      form.reset({\n        name: client.name,\n        email: client.email || '',\n        phone: client.phone,\n        address: client.address,\n        assignedAgentId: client.assignedAgentId || undefined,\n        projectStatus: client.projectStatus,\n      });\n    } else if (!client && open) {\n      form.reset({\n        name: '',\n        email: '',\n        phone: '',\n        address: '',\n        assignedAgentId: undefined,\n        projectStatus: 'lead',\n      });\n    }\n  }, [client, open, form]);\n\n  const handleSubmit = async (data: InsertClient) => {\n    setIsLoading(true);\n    try {\n      if (client) {\n        await makeRequest('PUT', `/api/clients/${client.id}`, data);\n      } else {\n        await makeRequest('POST', '/api/clients', data);\n      }\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/metrics'] });\n      \n      onSave?.();\n      onOpenChange(false);\n    } catch (error) {\n      console.error('Failed to save client:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getApprovalStepStatus = (step: string) => {\n    if (!client?.approvals) return 'pending';\n    \n    const approval = client.approvals.find(a => a.step === step);\n    return approval?.status || 'pending';\n  };\n\n  const getApprovalStatusVariant = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'default';\n      case 'pending':\n        return 'secondary';\n      case 'rejected':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const approvalSteps = [\n    { key: 'application', label: 'Application Submission' },\n    { key: 'verification', label: 'Document Verification' },\n    { key: 'inspection', label: 'Site Inspection' },\n    { key: 'noc', label: 'NOC Issuance' },\n    { key: 'clearance', label: 'Final Installation Clearance' },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-screen overflow-y-auto\" data-testid=\"modal-client\">\n        <DialogHeader>\n          <DialogTitle>\n            {client ? 'Edit Client' : 'Add New Client'}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Client Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter client name\" {...field} data-testid=\"input-client-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+91 9876543210\" {...field} data-testid=\"input-client-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"client@example.com\" type=\"email\" {...field} data-testid=\"input-client-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"assignedAgentId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assigned Agent</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-agent\">\n                          <SelectValue placeholder=\"Select an agent\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {agents?.map((agent: User) => (\n                          <SelectItem key={agent.id} value={agent.id}>\n                            {agent.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter complete address\" \n                      rows={3} \n                      {...field} \n                      data-testid=\"textarea-client-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Government Approval Progress - only show for existing clients */}\n            {client && (\n              <div>\n                <h4 className=\"text-sm font-semibold mb-3\">Government Approval Progress</h4>\n                <div className=\"space-y-2\">\n                  {approvalSteps.map((step) => {\n                    const status = getApprovalStepStatus(step.key);\n                    return (\n                      <div\n                        key={step.key}\n                        className=\"flex items-center justify-between p-2 rounded bg-muted/30\"\n                        data-testid={`approval-step-${step.key}`}\n                      >\n                        <span className=\"text-sm\">{step.label}</span>\n                        <Badge variant={getApprovalStatusVariant(status)} className=\"text-xs\">\n                          {status.charAt(0).toUpperCase() + status.slice(1)}\n                        </Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            \n            {/* Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-client\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isLoading}\n                data-testid=\"button-save-client\"\n              >\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                {client ? 'Save Changes' : 'Create Client'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9250},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nThis is a comprehensive Solar Business Management System built for a solar company to manage clients, government approvals, inventory, finance, and agent activities. The application serves as a centralized platform to streamline the entire solar project lifecycle from initial client contact through government approval processes to final installation and billing.\n\nThe system is designed to handle role-based access control with admin and agent roles, where admins have full system access while agents have limited access to their assigned clients and tasks. The application focuses on the government approval workflow which is critical for solar installations, providing a step-by-step pipeline tracking system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system variables and CSS custom properties\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Authentication**: Context-based authentication system with localStorage persistence\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Authentication**: Simple credential-based authentication (suitable for internal company use)\n- **API Design**: RESTful endpoints organized by feature modules (clients, approvals, tasks, etc.)\n- **Session Management**: Header-based user identification for API requests\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon Database (serverless PostgreSQL)\n- **ORM**: Drizzle ORM with full TypeScript support and type-safe queries\n- **Schema Structure**: \n  - User management with role-based access (admin/agent)\n  - Client management with agent assignment\n  - Government approval workflow tracking with step-by-step pipeline\n  - Task and reminder system\n  - Inventory management with stock tracking\n  - Financial management (invoices, payments)\n- **File Storage**: References to document URLs (prepared for future integration with cloud storage)\n\n## Authentication and Authorization\n- **Authentication Method**: Email/password with simple credential verification\n- **Authorization**: Role-based access control with two primary roles:\n  - Admin: Full system access including agent management and system configuration\n  - Agent: Limited access to assigned clients and related tasks\n- **Session Persistence**: Client-side localStorage with user context management\n- **Route Protection**: Component-based route guards with role checking\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon Database (serverless PostgreSQL) via `@neondatabase/serverless`\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **UI Framework**: React with extensive Radix UI component ecosystem\n- **State Management**: TanStack Query for efficient data fetching and caching\n- **Validation**: Zod for runtime type validation and schema validation\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **CSS Framework**: Tailwind CSS with PostCSS for processing\n- **Type Safety**: Full TypeScript implementation across frontend and backend\n- **Development Experience**: Replit-specific plugins for enhanced development workflow\n\n### Key Integrations\n- **PostgreSQL Connection**: Direct connection with SSL requirements for production security\n- **Font Loading**: Google Fonts integration for typography (DM Sans, Architects Daughter, Fira Code, Geist Mono)\n- **Form Handling**: React Hook Form with Zod resolvers for comprehensive form management\n- **Date Handling**: date-fns library for consistent date formatting and manipulation\n\nThe architecture emphasizes type safety throughout the stack with shared TypeScript types between frontend and backend, ensuring consistent data contracts and reducing runtime errors.","size_bytes":4283}},"version":1}